//! SPDX-License-Identifier: MIT
/* 
 * © final 2025.
 * rse-text-decoder is under the MIT License, read the LICENSE file
 * for more information.
 */

'use strict';

import {
    GameVersion,
    GameLanguage,
} from "./types";

function buildCharacterMap(
    version: GameVersion,
    language: GameLanguage,
): ReadonlyMap<number, string> {
    /**
     * Builds a character map based on the given game version
     * and language.
     * @param {GameVersion} version Target game version
     * @param {GameLanguage} language Target game language
     */
    const baseJpnMap: ReadonlyMap<number, string> = new Map([
        [0x00, '\u3000'],
        [0x01, 'あ'], [0x02, 'い'], [0x03, 'う'], [0x04, 'え'], [0x05, 'お'],
        [0x06, 'か'], [0x07, 'き'], [0x08, 'く'], [0x09, 'け'], [0x0a, 'こ'],
        [0x0b, 'さ'], [0x0c, 'し'], [0x0d, 'す'], [0x0e, 'せ'], [0x0f, 'そ'],
        [0x10, 'た'], [0x11, 'ち'], [0x12, 'つ'], [0x13, 'て'], [0x14, 'と'],
        [0x15, 'な'], [0x16, 'に'], [0x17, 'ぬ'], [0x18, 'ね'], [0x19, 'の'],
        [0x1a, 'は'], [0x1b, 'ひ'], [0x1c, 'ふ'], [0x1d, 'へ'], [0x1e, 'ほ'],
        [0x1f, 'ま'], [0x20, 'み'], [0x21, 'む'], [0x22, 'め'], [0x23, 'も'],
        [0x24, 'や'], [0x25, 'ゆ'], [0x26, 'よ'],
        [0x27, 'ら'], [0x28, 'り'], [0x29, 'る'], [0x2a, 'れ'], [0x2b, 'ろ'],
        [0x2c, 'わ'], [0x2d, 'を'], [0x2e, 'ん'],
        [0x2f, 'ぁ'], [0x30, 'ぃ'], [0x31, 'ぅ'], [0x32, 'ぇ'], [0x33, 'ぉ'],
        [0x34, 'ゃ'], [0x35, 'ゅ'], [0x36, 'ょ'],
        [0x37, 'が'], [0x38, 'ぎ'], [0x39, 'ぐ'], [0x3a, 'げ'], [0x3b, 'ご'],
        [0x3c, 'ざ'], [0x3d, 'じ'], [0x3e, 'ず'], [0x3f, 'ぜ'], [0x40, 'ぞ'],
        [0x41, 'だ'], [0x42, 'ぢ'], [0x43, 'づ'], [0x44, 'で'], [0x45, 'ど'],
        [0x46, 'ば'], [0x47, 'び'], [0x48, 'ぶ'], [0x49, 'べ'], [0x4a, 'ぼ'],
        [0x4b, 'ぱ'], [0x4c, 'ぴ'], [0x4d, 'ぷ'], [0x4e, 'ぺ'], [0x4f, 'ぽ'],
        [0x50, 'っ'],
        [0x51, 'ア'], [0x52, 'イ'], [0x53, 'ウ'], [0x54, 'エ'], [0x55, 'オ'],
        [0x56, 'カ'], [0x57, 'キ'], [0x58, 'ク'], [0x59, 'ケ'], [0x5a, 'コ'],
        [0x5b, 'サ'], [0x5c, 'シ'], [0x5d, 'ス'], [0x5e, 'セ'], [0x5f, 'ソ'],
        [0x60, 'タ'], [0x61, 'チ'], [0x62, 'ツ'], [0x63, 'テ'], [0x64, 'ト'],
        [0x65, 'ナ'], [0x66, 'ニ'], [0x67, 'ヌ'], [0x68, 'ネ'], [0x69, 'ノ'],
        [0x6a, 'ハ'], [0x6b, 'ヒ'], [0x6c, 'フ'], [0x6d, 'ヘ'], [0x6e, 'ホ'],
        [0x6f, 'マ'], [0x70, 'ミ'], [0x71, 'ム'], [0x72, 'メ'], [0x73, 'モ'],
        [0x74, 'ヤ'], [0x75, 'ユ'], [0x76, 'ヨ'],
        [0x77, 'ラ'], [0x78, 'リ'], [0x79, 'ル'], [0x7a, 'レ'], [0x7b, 'ロ'],
        [0x7c, 'ワ'], [0x7d, 'ヲ'], [0x7e, 'ン'],
        [0x7f, 'ァ'], [0x80, 'ィ'], [0x81, 'ゥ'], [0x82, 'ェ'], [0x83, 'ォ'],
        [0x84, 'ャ'], [0x85, 'ュ'], [0x86, 'ョ'],
        [0x87, 'ガ'], [0x88, 'ギ'], [0x89, 'グ'], [0x8a, 'ゲ'], [0x8b, 'ゴ'],
        [0x8c, 'ザ'], [0x8d, 'ジ'], [0x8e, 'ズ'], [0x8f, 'ゼ'], [0x90, 'ゾ'],
        [0x91, 'ダ'], [0x92, 'ヂ'], [0x93, 'ヅ'], [0x94, 'デ'], [0x95, 'ド'],
        [0x96, 'バ'], [0x97, 'ビ'], [0x98, 'ブ'], [0x99, 'ベ'], [0x9a, 'ボ'],
        [0x9b, 'パ'], [0x9c, 'ピ'], [0x9d, 'プ'], [0x9e, 'ペ'], [0x9f, 'ポ'],
        [0xa0, 'ッ'],
        // Full-width characters are used for the Latin charcters in this map
        [0xa1, '０'],
        [0xa2, '１'], [0xa3, '２'], [0xa4, '３'],
        [0xa5, '４'], [0xa6, '５'], [0xa7, '６'],
        [0xa8, '７'], [0xa9, '８'], [0xaa, '９'],
        [0xab, '！'], [0xac, '？'], [0xad, '。'],
        [0xae, 'ー'], [0xaf, '・'], [0xb0, '‥'],
        [0xb1, '『'], [0xb2, '』'],
        [0xb3, '「'], [0xb4, '」'],
        [0xb5, '♂'], [0xb6, '♀'],
        [0xb7, '円'], [0xb8, '．'], [0xb9, '×'], [0xba, '／'],
        [0xbb, 'Ａ'], [0xbc, 'Ｂ'], [0xbd, 'Ｃ'],
        [0xbe, 'Ｄ'], [0xbf, 'Ｅ'], [0xc0, 'Ｆ'],
        [0xc1, 'Ｇ'], [0xc2, 'Ｈ'], [0xc3, 'Ｉ'],
        [0xc4, 'Ｊ'], [0xc5, 'Ｋ'], [0xc6, 'Ｌ'],
        [0xc7, 'Ｍ'], [0xc8, 'Ｎ'], [0xc9, 'Ｏ'],
        [0xca, 'Ｐ'], [0xcb, 'Ｑ'], [0xcc, 'Ｒ'], [0xcd, 'Ｓ'],
        [0xce, 'Ｔ'], [0xcf, 'Ｕ'], [0xd0, 'Ｖ'],
        [0xd1, 'Ｗ'], [0xd2, 'Ｘ'], [0xd3, 'Ｙ'], [0xd4, 'Ｚ'],
        [0xd5, 'ａ'], [0xd6, 'ｂ'], [0xd7, 'ｃ'],
        [0xd8, 'ｄ'], [0xd9, 'ｅ'], [0xda, 'ｆ'],
        [0xdb, 'ｇ'], [0xdc, 'ｈ'], [0xdd, 'ｉ'],
        [0xde, 'ｊ'], [0xdf, 'ｋ'], [0xe0, 'ｌ'],
        [0xe1, 'ｍ'], [0xe2, 'ｎ'], [0xe3, 'ｏ'],
        [0xe4, 'ｐ'], [0xe5, 'ｑ'], [0xe6, 'ｒ'], [0xe7, 'ｓ'],
        [0xe8, 'ｔ'], [0xe9, 'ｕ'], [0xea, 'ｖ'],
        [0xeb, 'ｗ'], [0xec, 'ｘ'], [0xed, 'ｙ'], [0xee, 'ｚ'],
        [0xef, '►'], [0xf0, '：'],
        [0xf1, 'Ä'], [0xf2, 'Ö'], [0xf3, 'Ü'],
        [0xf4, 'ä'], [0xf5, 'ö'], [0xf6, 'ü'],
        [0xf7, '\x00'], [0xf8, '\x00'], [0xf9, '\x00'],
        [0xfa, '\x00'], [0xfb, '\x00'], [0xfc, '\x00'],
        [0xfd, '\x00'], [0xfe, '\n'], [0xff, '\x00'],
    ]);
    const baseNonJpnMap: ReadonlyMap<number, string> = new Map([
        [0x00, ' '],
        [0x01, 'À'], [0x02, 'Á'], [0x03, 'Â'], [0x04, 'Ç'], [0x05, 'È'],
        [0x06, 'É'], [0x07, 'Ê'], [0x08, 'Ë'], [0x09, 'Ì'], [0x0b, 'Î'],
        [0x0c, 'Ï'], [0x0d, 'Ò'], [0x0e, 'Ó'], [0x0f, 'Ô'], [0x10, 'Œ'],
        [0x11, 'Ù'], [0x12, 'Ú'], [0x13, 'Û'], [0x14, 'Ñ'], [0x15, 'ß'],
        [0x16, 'à'], [0x17, 'á'], [0x19, 'ç'], [0x1a, 'è'], [0x1b, 'é'],
        [0x1c, 'ê'], [0x1d, 'ë'], [0x1e, 'ì'], [0x20, 'î'], [0x21, 'ï'],
        [0x22, 'ò'], [0x23, 'ó'], [0x24, 'ô'], [0x25, 'œ'], [0x26, 'ù'],
        [0x27, 'ú'], [0x28, 'û'], [0x29, 'ñ'], [0x2a, 'º'], [0x2b, 'ª'],
        [0x2c, ' '], [0x2d, '&'], [0x2e, '+'], [0x34, ' '], [0x35, '='],
        [0x36, ';'], [0x50, '▯'], [0x51, '¿'], [0x52, '¡'], [0x53, ' '],
        [0x54, ' '], [0x55, ' '], [0x56, ' '], [0x57, ' '], [0x58, ' '],
        [0x59, ' '], [0x5a, 'Í'], [0x5b, '%'], [0x5c, '('], [0x5d, ')'],
        [0x68, 'â'], [0x6f, 'í'], [0x79, '↑'], [0x7a, '↓'], [0x7b, '←'],
        [0x7c, '→'], [0x7d, ' '], [0x7e, ' '], [0x7f, ' '], [0x80, ' '],
        [0x81, ' '], [0x82, ' '], [0x83, ' '], [0x84, 'ᵉ'], [0x85, '<'],
        [0x86, '>'], [0xa0, ' '],
        [0xa1, '0'],
        [0xa2, '1'], [0xa3, '2'], [0xa4, '3'],
        [0xa5, '4'], [0xa6, '5'], [0xa7, '6'],
        [0xa8, '7'], [0xa9, '8'], [0xaa, '9'],
        [0xab, '!'], [0xac, '?'], [0xad, '.'],
        [0xae, '-'], [0xaf, '·'], [0xb0, '…'],
        [0xb1, '“'], [0xb2, '”'],
        [0xb3, '‘'], [0xb4, '’'],
        [0xb5, '♂'], [0xb6, '♀'],
        [0xb7, '$'], [0xb8, ','], [0xb9, '×'], [0xba, '/'],
        [0xbb, 'A'], [0xbc, 'B'], [0xbd, 'C'],
        [0xbe, 'D'], [0xbf, 'E'], [0xc0, 'F'],
        [0xc1, 'G'], [0xc2, 'H'], [0xc3, 'I'],
        [0xc4, 'J'], [0xc5, 'K'], [0xc6, 'L'],
        [0xc7, 'M'], [0xc8, 'N'], [0xc9, 'O'],
        [0xca, 'P'], [0xcb, 'Q'], [0xcc, 'R'], [0xcd, 'S'],
        [0xce, 'T'], [0xcf, 'U'], [0xd0, 'V'],
        [0xd1, 'W'], [0xd2, 'X'], [0xd3, 'Y'], [0xd4, 'Z'],
        [0xd5, 'a'], [0xd6, 'b'], [0xd7, 'c'],
        [0xd8, 'd'], [0xd9, 'e'], [0xda, 'f'],
        [0xdb, 'g'], [0xdc, 'h'], [0xdd, 'i'],
        [0xde, 'j'], [0xdf, 'k'], [0xe0, 'l'],
        [0xe1, 'm'], [0xe2, 'n'], [0xe3, 'o'],
        [0xe4, 'p'], [0xe5, 'q'], [0xe6, 'r'], [0xe7, 's'],
        [0xe8, 't'], [0xe9, 'u'], [0xea, 'v'],
        [0xeb, 'w'], [0xec, 'x'], [0xed, 'y'], [0xee, 'z'],
        [0xef, '►'], [0xf0, ':'],
        [0xf1, 'Ä'], [0xf2, 'Ö'], [0xf3, 'Ü'],
        [0xf4, 'ä'], [0xf5, 'ö'], [0xf6, 'ü'],
        [0xf7, '\x00'], [0xf8, '\x00'], [0xf9, '\x00'],
        [0xfa, '\x00'], [0xfb, '\x00'], [0xfc, '\x00'],
        [0xfd, '\x00'], [0xfe, '\n'], [0xff, '\x00'],
    ]);
    const characterMap = new Map(
        (language === "JPN") ? baseJpnMap : baseNonJpnMap
    );
    if (language === "FRA") {
        characterMap.set(0xb1, '«');
        characterMap.set(0xb2, '»');
        if (version === "E") {
            // French Emerald has a codepoint for its abbreviation for
            // PokéBlocks.
            characterMap.set(0x64, ' ');
        }
    }
    if (language === "GER") {
        characterMap.set(0xb1, '„');
        characterMap.set(0xb2, '“');
    }
    if (language === "ITA") {
        // Italian uses a different range of codepoints to represent
        // the word for PokéBlocks.
        characterMap.set(0x57, ' ');
        characterMap.set(0x58, ' ');
        characterMap.set(0x59, ' ');
        characterMap.set(0x5e, ' ');
        characterMap.set(0x5f, ' ');
        characterMap.set(0x60, ' ');
        characterMap.set(0x61, ' ');
        characterMap.set(0x62, ' ');
        characterMap.set(0x63, ' ');
    }
    if (language === "JPN" && version === "FRLG") {
        // Japanese FR/LG use three-dot ellipsis
        characterMap.set(0xb0, '…');
    }
    if (version !== "E" && language !== "JPN") {
        characterMap.delete(0x50);
        characterMap.delete(0x7d);
        characterMap.delete(0x7e);
        characterMap.delete(0x7f);
        characterMap.delete(0x80);
        characterMap.delete(0x81);
        characterMap.delete(0x82);
        characterMap.delete(0x83);
    }
    if (version === "RS") {
        // 0xF7-0xF9 are not control characters in Ruby/Sapphire.
        // In these games, they will always print as arrows.
        characterMap.set(0xf7, '↑');
        characterMap.set(0xf8, '↓');
        characterMap.set(0xf9, '←');
        // All game languages use two dot elipsis
        characterMap.set(0xb0, '‥');
        if (language !== "JPN") {
            // Unused characters in R/S internationalisations
            // are filled in with leftovers of the original
            // Japanese encoding
            for (const [k, v] of baseJpnMap.entries()) {
                if (!characterMap.has(k)) {
                    characterMap.set(k, v);
                }
            }
        }
    }    
    return characterMap;
}

function buildCharacterMapR(
    version: GameVersion,
    language: GameLanguage
): ReadonlyMap<string, number> {
    /**
     * Builds a reverse character map based on the given game version
     * and language.
     * @param {GameVersion} version Target game version
     * @param {GameLanguage} language Target game language
     */
    const baseCharacterMap = buildCharacterMap(version, language);
    const characterMap = new Map([
        ['\n', 0xfe], ['\x00', 0xff],
    ]);
    for (const [k, v] of baseCharacterMap.entries()) {
        if (!characterMap.has(v)) {
            characterMap.set(v, k);
        }
    }
    const mapExtension: [string, number][] = [];
    if (language === "JPN") {
        mapExtension.push(
            ['‥', 0xb0], ['…', 0xb0],
            ['：', 0xf0],
            ['＿', 0x00], [' ', 0x00], ['_', 0x00], ['␣', 0x00],
            // Half-width characters are added for the copy-paste
            // convenience
            ['0', 0xa1],
            ['1', 0xa2], ['2', 0xa3], ['3', 0xa4],
            ['4', 0xa5], ['5', 0xa6], ['6', 0xa7],
            ['7', 0xa8], ['8', 0xa9], ['9', 0xaa],
            ['!', 0xab], ['?', 0xac],
            ['¥', 0xb7],
            ['·', 0xaf], ['･', 0xaf],
            ['-', 0xae], ['–', 0xae],
            ['.', 0xb8],
            ['/', 0xba],
            ['A', 0xbb], ['B', 0xbc], ['C', 0xbd],
            ['D', 0xbe], ['E', 0xbf], ['F', 0xc0],
            ['G', 0xc1], ['H', 0xc2], ['I', 0xc3],
            ['J', 0xc4], ['K', 0xc5], ['L', 0xc6],
            ['M', 0xc7], ['N', 0xc8], ['O', 0xc9],
            ['P', 0xca], ['Q', 0xcb], ['R', 0xcc], ['S', 0xcd],
            ['T', 0xce], ['U', 0xcf], ['V', 0xd0],
            ['W', 0xd1], ['X', 0xd2], ['Y', 0xd3], ['Z', 0xd4],
            ['a', 0xd5], ['b', 0xd6], ['c', 0xd7],
            ['d', 0xd8], ['e', 0xd9], ['f', 0xda],
            ['g', 0xdb], ['h', 0xdc], ['i', 0xdd],
            ['j', 0xde], ['k', 0xdf], ['l', 0xe0],
            ['m', 0xe1], ['n', 0xe2], ['o', 0xe3],
            ['p', 0xe4], ['q', 0xe5], ['r', 0xe6], ['s', 0xe7],
            ['t', 0xe8], ['u', 0xe9], ['v', 0xea],
            ['w', 0xeb], ['x', 0xec], ['y', 0xed], ['z', 0xee],
            [':', 0xf0],
        );
    } else {
        mapExtension.push(
            ['…', 0xb0], ['‥', 0xb0],
            // CodeGenerator uses an en dash (U+2013) for representing
            // 0xAE
            ['–', 0xae],
            // Some programs (e.g. PkHeX) use a full-width middle-dot
            // to represent 0xAF.
            // Bulbapedia uses U+FF65 to represent 0xAF, while this
            // tool uses U+00B7 to represent 0xAF for non-Japanese
            // languages.
            ['･', 0xaf], ['・', 0xaf],
            ['_', 0x00], ['␣', 0x00],
        )
    }
    for (const [k, v] of mapExtension.values()) {
        characterMap.set(k, v);
    }
    return characterMap;
}

const writableCharsJPN: ReadonlySet<number> = new Set([
    0x00,
    0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14,
    0x15, 0x16, 0x17, 0x18, 0x19,
    0x1a, 0x1b, 0x1c, 0x1d, 0x1e,
    0x1f, 0x20, 0x21, 0x22, 0x23,
    0x24, 0x25, 0x26,
    0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e,
    0x2f, 0x30, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36,
    0x37, 0x38, 0x39, 0x3a, 0x3b,
    0x3c, 0x3d, 0x3e, 0x3f, 0x40,
    0x41, 0x42, 0x43, 0x44, 0x45,
    0x46, 0x47, 0x48, 0x49, 0x4a,
    0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50,
    0x51, 0x52, 0x53, 0x54, 0x55,
    0x56, 0x57, 0x58, 0x59, 0x5a,
    0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x61, 0x62, 0x63, 0x64,
    0x65, 0x66, 0x67, 0x68, 0x69,
    0x6a, 0x6b, 0x6c, 0x6d, 0x6e,
    0x6f, 0x70, 0x71, 0x72, 0x73,
    0x74, 0x75, 0x76,
    0x77, 0x78, 0x79, 0x7a, 0x7b,
    0x7c, 0x7d, 0x7e,
    0x7f, 0x80, 0x81, 0x82, 0x83,
    0x84, 0x85, 0x86,
    0x87, 0x88, 0x89, 0x8a, 0x8b,
    0x8c, 0x8d, 0x8e, 0x8f, 0x90,
    0x91, 0x92, 0x93, 0x94, 0x95,
    0x96, 0x97, 0x98, 0x99, 0x9a,
    0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    0xa0,
    0xa1,
    0xa2, 0xa3, 0xa4,
    0xa5, 0xa6, 0xa7,
    0xa8, 0xa9, 0xaa,
    0xab, 0xac, 0xad,
    0xae, 0xaf, 0xb0,
    0xb1, 0xb2,
    0xb3, 0xb4,
    0xb5, 0xb6,
    0xba,
    0xbb, 0xbc, 0xbd,
    0xbe, 0xbf, 0xc0,
    0xc1, 0xc2, 0xc3,
    0xc4, 0xc5, 0xc6,
    0xc7, 0xc8, 0xc9,
    0xca, 0xcb, 0xcc, 0xcd,
    0xce, 0xcf, 0xd0,
    0xd1, 0xd2, 0xd3, 0xd4,
    0xd5, 0xd6, 0xd7,
    0xd8, 0xd9, 0xda,
    0xdb, 0xdc, 0xdd,
    0xde, 0xdf, 0xe0,
    0xe1, 0xe2, 0xe3,
    0xe4, 0xe5, 0xe6, 0xe7,
    0xe8, 0xe9, 0xea,
    0xeb, 0xec, 0xed, 0xee,
    0xff,
]);

const writableCharsENG: ReadonlySet<number> = new Set([
    0x00,
    0xa1,
    0xa2, 0xa3, 0xa4,
    0xa5, 0xa6, 0xa7,
    0xa8, 0xa9, 0xaa,
    0xab, 0xac, 0xad,
    0xae, 0xb0,
    0xb1, 0xb2,
    0xb3, 0xb4,
    0xb5, 0xb6,
    0xb8, 0xba,
    0xbb, 0xbc, 0xbd,
    0xbe, 0xbf, 0xc0,
    0xc1, 0xc2, 0xc3,
    0xc4, 0xc5, 0xc6,
    0xc7, 0xc8, 0xc9,
    0xca, 0xcb, 0xcc, 0xcd,
    0xce, 0xcf, 0xd0,
    0xd1, 0xd2, 0xd3, 0xd4,
    0xd5, 0xd6, 0xd7,
    0xd8, 0xd9, 0xda,
    0xdb, 0xdc, 0xdd,
    0xde, 0xdf, 0xe0,
    0xe1, 0xe2, 0xe3,
    0xe4, 0xe5, 0xe6, 0xe7,
    0xe8, 0xe9, 0xea,
    0xeb, 0xec, 0xed, 0xee,
    0xff,
]);

const writableCharsGER: ReadonlySet<number> = new Set([
    0x00,
    0xa1,
    0xa2, 0xa3, 0xa4,
    0xa5, 0xa6, 0xa7,
    0xa8, 0xa9, 0xaa,
    0xab, 0xac, 0xad,
    0xae, 0xb0,
    0xb1, 0xb2,
    0xb3, 0xb4,
    0xb5, 0xb6,
    0xb8, 0xba,
    0xbb, 0xbc, 0xbd,
    0xbe, 0xbf, 0xc0,
    0xc1, 0xc2, 0xc3,
    0xc4, 0xc5, 0xc6,
    0xc7, 0xc8, 0xc9,
    0xca, 0xcb, 0xcc, 0xcd,
    0xce, 0xcf, 0xd0,
    0xd1, 0xd2, 0xd3, 0xd4,
    0xd5, 0xd6, 0xd7,
    0xd8, 0xd9, 0xda,
    0xdb, 0xdc, 0xdd,
    0xde, 0xdf, 0xe0,
    0xe1, 0xe2, 0xe3,
    0xe4, 0xe5, 0xe6, 0xe7,
    0xe8, 0xe9, 0xea,
    0xeb, 0xec, 0xed, 0xee,
    0xf1, 0xf2, 0xf3,
    0xf4, 0xf5, 0xf6,
    0xff,
]);

export const characterMaps = {
    "RS": {
        "JPN": buildCharacterMap("RS", "JPN"),
        "ENG": buildCharacterMap("RS", "ENG"),
        "FRA": buildCharacterMap("RS", "FRA"),
        "ITA": buildCharacterMap("RS", "ITA"),
        "GER": buildCharacterMap("RS", "GER"),
        "SPA": buildCharacterMap("RS", "SPA"),
    },
    "FRLG": {
        "JPN": buildCharacterMap("FRLG", "JPN"),
        "ENG": buildCharacterMap("FRLG", "ENG"),
        "FRA": buildCharacterMap("FRLG", "FRA"),
        "ITA": buildCharacterMap("FRLG", "ITA"),
        "GER": buildCharacterMap("FRLG", "GER"),
        "SPA": buildCharacterMap("FRLG", "SPA"),
    },
    "E": {
        "JPN": buildCharacterMap("E", "JPN"),
        "ENG": buildCharacterMap("E", "ENG"),
        "FRA": buildCharacterMap("E", "FRA"),
        "ITA": buildCharacterMap("E", "ITA"),
        "GER": buildCharacterMap("E", "GER"),
        "SPA": buildCharacterMap("E", "SPA"),
    },
};

export const characterMapsR = {
    "RS": {
        "JPN": buildCharacterMapR("RS", "JPN"),
        "ENG": buildCharacterMapR("RS", "ENG"),
        "FRA": buildCharacterMapR("RS", "FRA"),
        "ITA": buildCharacterMapR("RS", "ITA"),
        "GER": buildCharacterMapR("RS", "GER"),
        "SPA": buildCharacterMapR("RS", "SPA"),
    },
    "FRLG": {
        "JPN": buildCharacterMapR("FRLG", "JPN"),
        "ENG": buildCharacterMapR("FRLG", "ENG"),
        "FRA": buildCharacterMapR("FRLG", "FRA"),
        "ITA": buildCharacterMapR("FRLG", "ITA"),
        "GER": buildCharacterMapR("FRLG", "GER"),
        "SPA": buildCharacterMapR("FRLG", "SPA"),
    },
    "E": {
        "JPN": buildCharacterMapR("E", "JPN"),
        "ENG": buildCharacterMapR("E", "ENG"),
        "FRA": buildCharacterMapR("E", "FRA"),
        "ITA": buildCharacterMapR("E", "ITA"),
        "GER": buildCharacterMapR("E", "GER"),
        "SPA": buildCharacterMapR("E", "SPA"),
    },
};

export const writableCharSet = {
    "JPN": writableCharsJPN,
    "ENG": writableCharsENG,
    "FRA": writableCharsENG,
    "ITA": writableCharsENG,
    "GER": writableCharsGER,
    "SPA": writableCharsENG,
}
